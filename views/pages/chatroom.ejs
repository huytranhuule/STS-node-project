<!DOCTYPE html>
<html>

<head>
    <title>Socket.IO chat</title>
    <style>
        body {
            margin: 0;
            padding-bottom: 3rem;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        }

        #form {
            background: rgba(0, 0, 0, 0.15);
            padding: 0.25rem;
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            display: flex;
            height: 3rem;
            box-sizing: border-box;
            backdrop-filter: blur(10px);
        }

        #input {
            border: none;
            padding: 0 1rem;
            flex-grow: 1;
            border-radius: 2rem;
            margin: 0.25rem;
        }

        #input:focus {
            outline: none;
        }

        #form>button {
            background: #333;
            border: none;
            padding: 0 1rem;
            margin: 0.25rem;
            border-radius: 3px;
            outline: none;
            color: #fff;
        }

        #messages {
            list-style-type: none;
            margin: 0;
            padding: 0;
        }

        #messages>li {
            padding: 0.5rem 1rem;
        }

        #messages>li:nth-child(odd) {
            background: #efefef;
        }

        .seen {
            float: right;
        }
    </style>
</head>

<body>
    <h1>Chatroom</h1>
    <ul id="messages">
        <% for(message of messages){ %>
            <li>
                <span class="content">
                    <span class="user">
                        <%= message.user %>:
                    </span>
                    <span class="message">
                        <%= message.message %>
                    </span>
                </span>
                <span class="seen"></span>

            </li>
            <% } %>
    </ul>
    <form id="form" action="">
        <label for="msg">Message</label>
        <input id="msg" autocomplete="off" />
        <button type="submit" id="send-button">Send</button>
    </form>
</body>
<script src="/socket.io/socket.io.js"></script>
<script>
    const getCookieValue = (name) => (
        document.cookie.match('(^|;)\\s*' + name + '\\s*=\\s*([^;]+)')?.pop() || ''
    )
    const token = getCookieValue("token");
    const socket = io("http://localhost:8080", {
        query: { token: token },
    });

    const messages = document.getElementById('messages');
    const form = document.getElementById('form');
    const msg = document.getElementById('msg');
    const seens = document.getElementsByClassName('seen');

    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    let room = urlParams.get('room');

    let messageLis = document.getElementsByClassName('message');
    let msgList = <%- JSON.stringify(messages) %>;
    const curUser = <%- JSON.stringify(username) %>;

    let split = room.split('--with--');
    if (split.length > 1) {
        let unique = [...new Set(split)].sort((a, b) => (a < b ? -1 : 1));
        room = `${unique[0]}--with--${unique[1]}`;
    }

    form.addEventListener('submit', function (e) {
        e.preventDefault();
        if (msg.value) {
            socket.emit('chat message', msg.value, room);
            msg.value = '';
        }
    });

    socket.emit('join-room', room, curUser, joinMsg => {
        var item = document.createElement('li');
        item.textContent = joinMsg;
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
    });

    socket.on('connect', function (msg) {

        Array.prototype.forEach.call(messageLis, (messageLi, index) => messageLi.addEventListener('dblclick', function () {
            if (msgList[index].user == curUser) messageLi.setAttribute("contenteditable", "true");
        }));

    });

    socket.on('seen-message', function (msgs) {
        Array.prototype.forEach.call(seens, (seen, index) => {
            seen.innerHTML = "Seen By: " 
            seen.innerHTML += msgs.message[index].seenList || " ";
        });
    });


    socket.on('chat message', function ({ message, username, id }) {
        var item = document.createElement('li');
        item.innerHTML = `<span class='content'> <span class='user'> ${username}:  </span><span class='message'> ${message} </span></span> <span class='seen'> </span>`
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);

        const newMsgs = document.getElementsByClassName('message');
        msgList = [...msgList, {_id: id, user: username, message}]
        console.log("666", msgList);
        console.log("677", newMsgs);
        
        Array.prototype.forEach.call(newMsgs, (newMsg, index) => newMsg.addEventListener('dblclick', function () {
            if (msgList[index].user == curUser) newMsg.setAttribute("contenteditable", "true");
        })); 

        Array.prototype.forEach.call(newMsgs, (msg, index) => msg.addEventListener('input', function () {
        const newMsg = msg.textContent;
        const msgId = msgList[index]._id
        socket.emit('edit-message', msgId, newMsg, room);
    }));
        
    });


    socket.on('edit-message', function (msg) {
        const index = msgList.findIndex(mess => mess._id == msg.message[0]._id);
        messageLis[index].textContent = msg.message[0].message;
    });
    
    Array.prototype.forEach.call(messageLis, (messageLi, index) => messageLi.addEventListener('input', function () {
        const newMsg = messageLi.textContent;
        const msgId = msgList[index]._id
        socket.emit('edit-message', msgId, newMsg, room);
    }));

</script>

</html>